var CollectionMetaData = require("./CollectionMetaData");
var DataCollection = require("../DataCollection");
/* PrimaryKeyMaintainer - helper for {@link DataCollection}
 * @author TeamworkGuy2
 */
var PrimaryKeyMaintainer = (function () {
    function PrimaryKeyMaintainer(dataSrc, modelKeys) {
        this.metaDataCollectionName = "collection_meta_data";
        this.metaDataColl = null;
        this.dataSrc = dataSrc;
        this.modelKeys = modelKeys;
    }
    /** Manage (add/track) unique IDs for objects added to data collections
     * @param {String} collectionName: the collection name (lower underscore case)
     * @param {any[]} docs: the list of objects being added to the 'collectionName' collection
     * @param {Boolean} addGeneratedKeys: true to generate unique IDs for properties that use
     * auto-generated keys, false to just track newly added items to ensure unique IDs are maintained
     */
    PrimaryKeyMaintainer.prototype.manageKeys = function (collectionName, docs, addGeneratedKeys) {
        var modelKeys = this.modelKeys;
        this.metaDataColl = PrimaryKeyMaintainer.initMetaDataCollection(this.metaDataColl, this.metaDataCollectionName, this.dataSrc);
        var generatedIdNames = modelKeys.getGeneratedIdNames(collectionName);
        if (generatedIdNames.length > 0) {
            var collectionInfo = this.metaDataColl.data({ collectionName: collectionName })[0];
            if (collectionInfo == null) {
                collectionInfo = PrimaryKeyMaintainer.loadCollectionMetaData(this.dataSrc, this.modelKeys, collectionName);
                this.metaDataColl.add(collectionInfo);
            }
            var collGeneratedKeyInfos = collectionInfo.autoGeneratedKeys;
            // use the add or track function depending on whether the docs are being added with or without existing unique IDs
            if (Array.isArray(docs)) {
                docs.forEach(function (doc) {
                    if (addGeneratedKeys) {
                        modelKeys.addGeneratedIds(collGeneratedKeyInfos, doc);
                    }
                    else {
                        modelKeys.trackGeneratedIds(collGeneratedKeyInfos, doc);
                    }
                });
            }
            else {
                if (addGeneratedKeys) {
                    modelKeys.addGeneratedIds(collGeneratedKeyInfos, docs);
                }
                else {
                    modelKeys.trackGeneratedIds(collGeneratedKeyInfos, docs);
                }
            }
            this.metaDataColl.update(collectionInfo);
        }
    };
    // Load meta data about item primary/auto-generated keys from a data collection
    PrimaryKeyMaintainer.loadCollectionMetaData = function (dbInst, modelKeys, collectionName) {
        var collMetaData = new CollectionMetaData(collectionName, modelKeys.getUniqueIdNames(collectionName), modelKeys.getGeneratedIdNames(collectionName));
        var items = dbInst.find(collectionName).data();
        if (items && items.length > 0) {
            // get the list of auto-generated property names
            var autoGeneratedKeyNames = collMetaData.autoGeneratedKeys.map(function (d) { return d.name; });
            var agKeyCount = autoGeneratedKeyNames.length;
            var largestAgKeyValues = new Array(agKeyCount);
            // search each item for each of the auto-generated properties and save the largest ones
            // first loop initializing the array of largest auto-generated values using item[0]
            for (var ii = 0; ii < agKeyCount; ii++) {
                largestAgKeyValues[ii] = items[0][autoGeneratedKeyNames[ii]];
            }
            for (var i = 1, size = items.length; i < size; i++) {
                for (var ii = 0; ii < agKeyCount; ii++) {
                    if (largestAgKeyValues[ii] > items[i][autoGeneratedKeyNames[ii]]) {
                        largestAgKeyValues[ii] = items[i][autoGeneratedKeyNames[ii]];
                    }
                }
            }
        }
        return collMetaData;
    };
    // creates an {@link DataCollection} if {@code dataColl} is null, otherwise returns {@code dataColl} unmodified
    PrimaryKeyMaintainer.initMetaDataCollection = function (dataColl, collectionName, dbDataInst) {
        if (dataColl == null) {
            return new DataCollection(collectionName, dbDataInst);
        }
        return dataColl;
    };
    return PrimaryKeyMaintainer;
})();
module.exports = PrimaryKeyMaintainer;
